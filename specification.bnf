{
    extends(".*_expr")=expr
    tokens=[number="regexp:[0-9]+"]
}
expr ::= precedence_1
         | precedence_2
         | precedence_3
         | precedence_4
         | precedence_5
         | precedence_6
         | precedence_7
         | precedence_8
         | precedence_9
         | integer

integer ::= digit+

private precedence_1 ::= greater_expr
                         | gt_expr
                         | greaterequal_expr
                         | ge_expr
                         | less_expr
                         | lt_expr
                         | lessequal_expr
                         | le_expr
                         | equal_expr
                         | or_expr
                         | and_expr
private precedence_2 ::= minus_expr | plus_expr
private precedence_3 ::= times_expr | div_expr | mod_expr
private precedence_4 ::= negative_expr | positive_expr { rightAssociative=true }
private precedence_5 ::= power_expr
private precedence_6 ::= high_expr
                         | low_expr
                         | floor_expr
                         | ceil_expr
                         | rerollonce_expr
                         | rerollall_expr
                         | rerollless_expr
                         | rerollallless_expr
                         | rl_expr
                         | Rl_expr
                         | rerollgreater_expr
                         | rerollallgreater_expr
                         | rh_expr
                         | Rh_expr
                         | thresholdlower_expr
                         | thresholdupper_expr
private precedence_7 ::= die_expr | avg_expr | crit_expr | max_expr
private precedence_8 ::= factorial_expr
private precedence_9 ::= paren_expr

greater_expr ::= expr ">" expr
gt_expr ::= expr "gt" expr
greaterequal_expr ::= expr ">=" expr
ge_expr ::= expr "ge" expr
less_expr ::= expr "<" expr
lt_expr ::= expr "lt" expr
lessequal_expr ::= expr "<=" expr
le_expr ::= expr "le" expr
equal_expr ::= expr "=" expr
or_expr ::= expr "|" expr
and_expr ::= expr "&" expr

minus_expr ::= expr "-" expr
plus_expr ::= expr "+" expr

times_expr ::= expr "*" expr
div_expr ::= expr "/" expr
mod_expr ::= expr "%" expr

negative_expr ::= "-" expr
positive_expr ::= "+" expr

power_expr ::= expr "^" expr

high_expr ::= expr "h" expr
low_expr ::= expr "l" expr
floor_expr ::= expr "f" expr
ceil_expr ::= expr "c" expr
rerollonce_expr ::= expr "r" expr
rerollall_expr ::= expr "R" expr
rerollless_expr ::= expr "r<" expr
rerollallless_expr ::= expr "R<" expr
rl_expr ::= expr "rl" expr
Rl_expr ::= expr "Rl" expr
rerollgreater_expr ::= expr "r>" expr
rerollallgreater_expr ::= expr "R>" expr
rh_expr ::= expr "rh" expr
Rh_expr ::= expr "Rh" expr
thresholdlower_expr ::= expr "t" expr
thresholdupper_expr ::= expr "T" expr

die_expr ::= expr "d" expr
avg_expr ::= expr "da" expr
crit_expr ::= expr "dc" expr
max_expr ::= expr "dm" expr

factorial_expr ::= expr "!"

paren_expr ::= open expr close

digit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" ;
open ::= "("
close ::= ")"